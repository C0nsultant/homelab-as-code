apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: paperless-ngx-postgresql
  namespace: default
spec:
  # Current paperless-ngx is built with PG 15, also use that as long as it is supported
  # https://github.com/paperless-ngx/paperless-ngx/blob/v2.13.5/Dockerfile#L96
  # https://packages.debian.org/de/bookworm/postgresql-client
  # https://www.postgresql.org/support/versioning/
  imageName: ghcr.io/cloudnative-pg/postgresql:15.10-29
  instances: 1
  managed:
    services:
      disabledDefaultServices: ["ro", "r"]
    roles:
      - name: stashbackup
        passwordSecret:
          name: stash-postgres-backup-user
        login: true
        superuser: false
        inRoles:
          - pg_read_all_data
  bootstrap:
    initdb:
      database: paperless-ngx
      owner: paperless-ngx
      secret:
        name: paperless-postgres-user
  storage:
    size: 2Gi
    storageClass: cluster-replicated
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: paperless-ngx-redis
  namespace: default
spec:
  interval: 1m
  chart:
    spec:
      chart: redis
      version: 20.6.3
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
  values:
    auth:
      enabled: false
    global:
      storageClass: cluster-scratch
    master:
      persistence:
        size: 2Gi
    architecture: standalone
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: paperless-ngx
  namespace: default
spec:
  interval: 1m
  chart:
    spec:
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: default
  values:
    controllers:
      main:
        containers:
          main:
            image:
              repository: paperlessngx/paperless-ngx
              tag: 2.14.4
            env:
              PAPERLESS_OCR_LANGUAGES: deu eng
              PAPERLESS_OCR_LANGUAGE: deu+eng
              PAPERLESS_URL: https://paperless.${SERVICE_DOMAIN}
              PAPERLESS_SECRET_KEY:
                valueFrom:
                  secretKeyRef:
                    name: paperless-secrets
                    key: paperless-secret-key
              PAPERLESS_TIME_ZONE: Europe/Berlin
              PAPERLESS_CONSUMER_DELETE_DUPLICATES: true
              PAPERLESS_CONSUMER_RECURSIVE: true
              PAPERLESS_CONSUMER_POLLING: 60
              PAPERLESS_DBHOST: paperless-ngx-postgresql-rw
              PAPERLESS_DBUSER: paperless-ngx
              PAPERLESS_DBPASS:
                valueFrom:
                  secretKeyRef:
                    name: paperless-postgres-user
                    key: password
              PAPERLESS_DBNAME: paperless-ngx
              PAPERLESS_REDIS: redis://paperless-ngx-redis-master:6379
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
            resources:
              requests:
                cpu: 10m
                memory: 1Gi
    service:
      main:
        controller: main
        ports:
          http:
            port: 8000
    ingress:
      main:
        className: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt
        hosts:
          - host: paperless.${SERVICE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: main
                  port: http
        tls:
          - secretName: paperless-tls
            hosts:
              - paperless.${SERVICE_DOMAIN}
    persistence:
      data:
        type: persistentVolumeClaim
        storageClass: cluster-replicated
        accessMode: ReadWriteOnce
        size: 2Gi
        globalMounts:
          - path: /usr/src/paperless/data
      consume:
        type: nfs
        server: 192.168.1.2
        path: /mnt/tank/Dokumente/Paperless/consume
        globalMounts:
          - path: /usr/src/paperless/consume
      media:
        type: persistentVolumeClaim
        storageClass: cluster-replicated
        accessMode: ReadWriteOnce
        size: 25Gi
        globalMounts:
          - path: /usr/src/paperless/media
      export:
        type: nfs
        server: 192.168.1.2
        path: /mnt/tank/Dokumente/Paperless/export
        globalMounts:
          - path: /usr/src/paperless/export
---
apiVersion: stash.appscode.com/v1beta1
kind: BackupConfiguration
metadata:
  name: dokumente
  namespace: default
spec:
  repository:
    name: b2-dokumente-repo
    namespace: stash-system
  timeOut: 2h
  schedule: "32 * * * *"
  target:
    ref:
      apiVersion: apps/v1
      kind: Deployment
      name: paperless-ngx
    volumeMounts:
      - name: export
        mountPath: /usr/src/paperless/export
    paths:
      - /usr/src/paperless/export
  hooks:
    preBackup:
      exec:
        command:
          - document_exporter
          - /usr/src/paperless/export
      containerName: main
  retentionPolicy:
    name: "staggered"
    keepHourly: 24
    keepDaily: 14
    keepWeekly: 12
    keepMonthly: 6
    keepYearly: 2
    prune: true
---
apiVersion: appcatalog.appscode.com/v1alpha1
kind: AppBinding
metadata:
  name: paperless-ngx-postgresql
  namespace: default
spec:
  clientConfig:
    service:
      name: paperless-ngx-postgresql-rw
      port: 5432
      scheme: postgresql
  secret:
    name: stash-postgres-backup-user
  type: postgres
---
apiVersion: stash.appscode.com/v1beta1
kind: BackupConfiguration
metadata:
  name: paperless-ngx-postgresql
  namespace: default
spec:
  schedule: "39 * * * *"
  task:
    name: postgres-backup-15.1
  repository:
    name: b2-database-repo
    namespace: stash-system
  target:
    alias: paperless-ngx
    ref:
      apiVersion: appcatalog.appscode.com/v1alpha1
      kind: AppBinding
      name: paperless-ngx-postgresql
  retentionPolicy:
    name: "staggered"
    keepHourly: 24
    keepDaily: 14
    keepWeekly: 12
    keepMonthly: 6
    keepYearly: 2
    prune: true
